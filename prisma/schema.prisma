// defines types for objects (gets sent to mysql)



generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id String @id@default(uuid())
  name String 
  userId String
  billboards Billboard[] @relation("StoreToManyBillboard")
  categories Category[] @relation("StoreToManyCategory")
  colors Color[] @relation("StoreToManyColor")
  sizes Size[] @relation("StoreToManySize")
  products Product[] @relation("StoreToManyProduct")
  orders Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Billboard {
  id String @id@default(uuid())
  storeId String 
  store Store @relation("StoreToManyBillboard", fields: [storeId], references: [id])
  categories Category[] @relation("BillboardToManyCategory")
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Category {
  id String @id@default(uuid())
  storeId String
  store Store @relation("StoreToManyCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation("BillboardToManyCategory", fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToManyProduct")
  name String
  createdAt DateTime @default(now())

  @@index([storeId])
  @@index([billboardId])
}


model Size {
  id String @id@default(uuid())
  storeId String
  store Store @relation("StoreToManySize", fields: [storeId], references: [id])
  product Product[] @relation("SizeToManyProduct")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}



model Color {
  id String @id@default(uuid())
  storeId String
  store Store @relation("StoreToManyColor", fields: [storeId], references: [id])
  products Product[] @relation("ColorToManyProduct")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Product {
  id String @id@default(uuid())
  name String
  price Decimal
  storeId String
  store Store @relation("StoreToManyProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToManyProduct", fields: [categoryId], references: [id])
  sizeId String
  size Size @relation("SizeToManyProduct", fields: [sizeId], references: [id])
  colorId String
  color Color @relation("ColorToManyProduct", fields: [colorId], references: [id])
  images Image[]
  isArchived Boolean
  isFeatured Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}


model Image {
  id String @id@default(uuid())
  imageUrl String
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}


model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPaid Boolean @default(false)


  @@index([storeId])
}


model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])


  @@index([orderId])
  @@index([productId])
}